import React, { useState, useEffect } from 'react';
import { useGun, useGunKeys, useGunKeyAuth } from '@altrx/gundb-react-hooks';

type KeyPair = {
  pub: string;
  priv: string;
  epub: string;
  epriv: string;
};

type GunContextType = {
  user;
  login: (keys: undefined | string | KeyPair) => void;
  logout: () => void;
  sea;
  appKeys: undefined | string | KeyPair;
  isLoggedIn: boolean;
  displayName: string;
  Provider;
};

type Storage = {
  getItem: (key: string) => any;
  setItem: (key: string, data: string) => any;
  removeItem: (key: string) => any;
};

type ProviderOpts = {
  peers: [];
  Gun;
  sea;
  keyFieldName: string;
  storage: Storage;
  gunOpts;
  [key: string]: any;
};

const GunContext: GunContextType = React.createContext<GunContextType>({});
GunContext.displayName = 'GunContext';

const GunProvider = ({
  peers,
  Gun,
  sea,
  keyFieldName = 'keys',
  storage,
  gunOpts,
  ...props
}: ProviderOpts) => {
  if (!sea || !Gun || !peers) {
    throw new Error(`Provide peers, Gun and sea`);
  }

  const newGunInstance = (opts = { peers }) => {
    return Gun(opts);
  };

  const [isReadyToAuth, setReadyToAuth] = useState('');
  const [existingKeysStatus, setExistingKeysStatus] = useState('');

  const [gun] = useGun(Gun, gunOpts || { peers });
  const [appKeys, setAppKeys] = useGunKeys(sea, null);
  const [user, isLoggedIn] = useGunKeyAuth(
    gun,
    appKeys,
    isReadyToAuth === 'ready'
  );

  useEffect(() => {
    if (isLoggedIn && existingKeysStatus === 'notpresent') {
      const storeKeys = async () => {
        await storage.setItem(keyFieldName, JSON.stringify(appKeys));
      };

      storeKeys();
    }
  }, [isLoggedIn, appKeys]);

  useEffect(() => {
    if (existingKeysStatus === '') {
      const getKeys = async () => {
        const k = await storage.getItem(keyFieldName);
        const ks = JSON.parse(k || 'null');
        setAppKeys(ks);
        setExistingKeysStatus(ks ? 'present' : 'notpresent');
      };
      getKeys();
    }
  }, [
    storage,
    keyFieldName,
    existingKeysStatus,
    setExistingKeysStatus,
    setAppKeys,
  ]);

  const login = React.useCallback(
    async (keys) => {
      if (keys) {
        // This function is called when the user inputs existing
        // keys. In that case, we wanna make sure `appKeys` contains those instead
        // of the ones that were generated by the `useGunKeys` hook.
        setAppKeys(keys);
      }
      // We tell Gun we're ready to perform the authentication, either with existing
      // keys or the ones generated by the `useGunKeys` hook.
      setReadyToAuth(existingKeysStatus === 'present' ? 'ready' : 'waiting');
    },
    [setAppKeys, existingKeysStatus, setReadyToAuth]
  );

  const logout = React.useCallback(() => {
    const removeKeys = async () => {
      await storage.removeItem(keyFieldName);
    };

    removeKeys();
  }, []);

  const value = React.useMemo(
    () => ({ user, login, logout, sea, appKeys, isLoggedIn, newGunInstance }),
    [login, logout, user, appKeys, isLoggedIn, newGunInstance]
  );

  return <GunContext.Provider value={value} {...props} />;
};

function useAuth() {
  const context = React.useContext(GunContext);
  if (context === undefined) {
    throw new Error(`useAuth must be used within a GunProvider`);
  }
  return context;
}

export { GunProvider, useAuth };
