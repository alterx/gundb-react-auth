import React, { useState, useEffect } from 'react';
import { useGun, useGunKeys, useGunKeyAuth } from '@altrx/gundb-react-hooks';

type KeyPair = {
  pub: string;
  priv: string;
  epub: string;
  epriv: string;
};

type GunContextType = {
  user,
  login: (keys: undefined | string | KeyPair) => void,
  logout: () => void,
  sea,
  appKeys:  undefined | string | KeyPair,
  isLoggedIn: boolean,
  displayName: string,
  Provider,
}

const GunContext: GunContextType = React.createContext<GunContextType>({});
GunContext.displayName = 'GunContext';

const GunProvider = ({ peers, Gun, sea, keyFieldName = 'keys', ...props }) => {
  if (!sea || !Gun || !peers) {
    throw new Error(`Provide peers, Gun and sea`);
  }

  const [isReadyToAuth, setReadyToAuth] = useState(
    () => !!(localStorage.getItem(keyFieldName) || '')
  );

  const [gun] = useGun(Gun, { peers });
  const [appKeys, setAppKeys] = useGunKeys(sea, () =>
    JSON.parse(localStorage.getItem(keyFieldName) || "null")
  );
  const [user, isLoggedIn] = useGunKeyAuth(gun, appKeys, isReadyToAuth);

  useEffect(() => {
    if (isLoggedIn) {
      // log the keys so we can grab them, probably should find a better way
      localStorage.setItem(keyFieldName, JSON.stringify(appKeys));
      console.log(`App keys: ${JSON.stringify(appKeys)}`);
    }
  }, [isLoggedIn, appKeys]);

  const login = React.useCallback(
    async (keys) => {
      if (keys) {
        // This function is called by the splash view when the user inputs existing
        // keys. In that case, we wanna make sure `appKeys` contains those instead
        // of the ones that were generated by the `useGunKeys` hook.
        setAppKeys(keys);
      }
      // We tell Gun we're ready to perform the authentication, either with existing
      // keys or the ones generated by the `useGunKeys` hook.
      setReadyToAuth(true);
    },
    [setAppKeys, setReadyToAuth]
  );

  const logout = React.useCallback(() => {
    localStorage.removeItem(keyFieldName);
  }, []);

  const value = React.useMemo(
    () => ({ user, login, logout, sea, appKeys, isLoggedIn }),
    [login, logout, user, appKeys, isLoggedIn]
  );

  return <GunContext.Provider value={value} {...props} />;
};

function useAuth() {
  const context = React.useContext(GunContext);
  if (context === undefined) {
    throw new Error(`useAuth must be used within a GunProvider`);
  }
  return context;
}

export { GunProvider, useAuth };